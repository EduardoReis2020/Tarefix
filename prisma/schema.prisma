// ============================================
// Tarefix - Prisma Schema
// Banco: PostgreSQL (Neon)
// ============================================

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ============================================
// MODELS PRINCIPAIS
// ============================================

// Usuários da aplicação
model User {
  id          String       @id @default(cuid())
  name        String
  email       String       @unique
  password    String
  role        GlobalRole   @default(USER) // SuperAdmin controla tudo
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relacionamentos
  memberships Membership[]
  tasks       Task[]       @relation("UserTasks")
  comments    Comment[]
  invites     Invite[]     @relation("UserInvites")

  // Times que o usuário é dono
  ownedTeams  Team[]

  // Relação para ActivityLog
  activityLogs ActivityLog[]
}

// Roles globais da aplicação (não confundir com roles de time)
enum GlobalRole {
  SUPERADMIN
  USER
}

// ============================================
// Times / Organizações
// ============================================
model Team {
  id          String        @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  ownerId     String
  owner       User          @relation(fields: [ownerId], references: [id])

  // Relacionamentos
  memberships Membership[]
  tasks       Task[]
  invites     Invite[]

  // Relação para ActivityLog
  activityLogs ActivityLog[]
}

// Relacionamento User ↔ Team com permissões
model Membership {
  id        String    @id @default(cuid())
  userId    String
  teamId    String
  role      TeamRole  @default(MEMBER)
  createdAt DateTime  @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id])
  team Team @relation(fields: [teamId], references: [id])

  @@unique([userId, teamId])
}

enum TeamRole {
  ADMIN     // Pode gerenciar tudo no time
  MEMBER    // Pode criar/editar tarefas
  READONLY  // Apenas visualiza
}

// ============================================
// Tarefas
// ============================================
model Task {
  id          String       @id @default(cuid())
  title       String
  description String?
  priority    TaskPriority @default(MEDIUM)
  status      TaskStatus   @default(TODO)
  createdAt   DateTime     @default(now())
  startDate   DateTime?
  dueDate     DateTime?
  updatedAt   DateTime     @updatedAt

  // Relacionamentos
  teamId String
  team   Team   @relation(fields: [teamId], references: [id])

  assignees User[]   @relation("UserTasks")
  tags      Tag[]    @relation("TaskTags")
  comments  Comment[]
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
  LATE
}

// Tags de tarefas
model Tag {
  id    String @id @default(cuid())
  name  String @unique

  tasks Task[] @relation("TaskTags")
}

// ============================================
// Comentários (chat por tarefa)
// ============================================
model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())

  userId String
  taskId String

  user User @relation(fields: [userId], references: [id])
  task Task @relation(fields: [taskId], references: [id])
}

// ============================================
// Convites de times
// ============================================
model Invite {
  id        String   @id @default(cuid())
  email     String   // Email do convidado
  status    InviteStatus @default(PENDING)
  createdAt DateTime @default(now())

  teamId String
  invitedById String

  team      Team @relation(fields: [teamId], references: [id])
  invitedBy User @relation("UserInvites", fields: [invitedById], references: [id])
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
}

// ============================================
// Planos de assinatura (Admin Global)
// ============================================
model Plan {
  id        String   @id @default(cuid())
  name      String
  price     Float
  features  String[] // lista de funcionalidades
  createdAt DateTime @default(now())
}

// ============================================
// Logs de atividades (auditoria)
// ============================================
model ActivityLog {
  id        String   @id @default(cuid())
  action    String
  createdAt DateTime @default(now())

  userId String?
  teamId String?

  user User? @relation(fields: [userId], references: [id])
  team Team? @relation(fields: [teamId], references: [id])
}
